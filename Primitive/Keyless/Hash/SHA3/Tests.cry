/**
 * Tests of the SHA3 hash functions.
 *
 * Test vectors drawn from the NIST Cryptographic Algorithm Validation Program.
 * This program includes test vectors that can be used to spot-check an
 * implementation. It includes tests for bitwise inputs (where the input length
 * is any nonnegative integer) and for bytewise inputs (where the input length
 * is a multiple of 8).
 * @see CAVP. https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/secure-hashing#sha3vsha3vss
 * @see SHA3 bitwise test vectors. https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/sha3/sha-3bittestvectors.zip
 * @see SHA3 bytewise test vectors. https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/sha3/sha-3bytetestvectors.zip
 *
 * Some of the bitwise tests in this file use the `KOP::truncate` function. The
 * CAVP vectors use the format described in [FIPS-202] Appendix B, where inputs
 * to SHA3 are provided as hex strings with an even number of digits and a
 * length parameter. The `h2b` function for processing such inputs has an
 * implicit truncation step. We've written the SHA3 spec to take arbitrary bit
 * vectors, but this assumes that the length of the input is its actual length.
 * The `truncate` function is written to support the even-hex-digit format and
 * must be called on an input before passing it to SHA3.
 *
 * @copyright Galois Inc.
 * @author Ajay Kumar Eeralla
 * @editor Iavor Diatchki <diatchki@galois.com>
 * @author Marcella Hastings <marcella@galois.com>
 */
module Primitive::Keyless::Hash::SHA3::Tests where

import Primitive::Keyless::Hash::KeccakBitOrdering as KBO

/**
 * CAVP test vectors for SHA3-224. These are drawn from the
 * `SHA3_224ShortMsg.rsp` file.
 */
submodule SHA3_224 where
    import Primitive::Keyless::Hash::SHA3::SHA3_224 as SHA3_224

    /**
     * This is from the bitwise tests.
     * ```repl
     * :prove t1
     * ```
     */
    property t1 = SHA3_224::hash [] ==
        0x6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7

    /**
     * This is from the bitwise tests.
     * ```repl
     * :prove t5
     * ```
     */
    property t5 = SHA3_224::hash (KBO::truncate`{5} 0x1f) ==
        0x65ad282dcf9642a2facc1e7545c58f3b17523e795fee58e4d21b10bf

    /**
     * This is from the bytewise tests.
     * ```repl
     * :prove t72
     * ```
     */
    property t72 = SHA3_224::hash 0xb29373f6f8839bd498 == output where
        output = 0xe02a13fa4770f824bcd69799284878f19bfdc833ac6d865f28b757d0

    /**
     * This is from the bitwise tests.
     * ```repl
     * :prove t512
     * ```
     */
    property t512 = SHA3_224::hash input == output where
        input = join [
            0xfc286db63e69d24c6962bb515cc32c86,
            0x67ed0c08ba9f331d1dd2c42de2e1bd0f,
            0x18edcc870280650cc87011ce6b0709f7,
            0xfe60033114144c69751717d315dc152f
        ]
        output = 0x157fd9f423a498868e233d9d64631f61aa5e8fbc23df413f7826c962

/**
 * CAVP test vectors for SHA3-256. These are drawn from the
 * `SHA3_256ShortMsg.rsp` file.
 */
submodule SHA3_256 where
    import Primitive::Keyless::Hash::SHA3::SHA3_256 as SHA3_256

    /**
     * This is from the bitwise tests.
     * ```repl
     * :prove t1
     * ```
     */
    property t1 = SHA3_256::hash [] ==
        0xa7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a

    /**
     * This is from the bitwise tests.
     * ```repl
     * :prove t7
     * ```
     */
    property t7 = SHA3_256::hash (KBO::truncate`{7} 0x0b) ==
        0x9e5f8c800689fa5168fc5fbfeca8bd5b3668ffd6f08143e2e396b9ae0f9b443e

    /**
     * This is from the bitwise tests.
     * ```repl
     * :prove t8
     * ```
     */
    property t8 = SHA3_256::hash 0x6a ==
        0xf35e560e05de779f2669b9f513c2a7ab81dfeb100e2f4ee1fb17354bfa2740ca


    /**
     * This is from the bytewise tests.
     * ```repl
     * :prove t72
     * ```
     */
    property t72 = SHA3_256::hash 0xfb8dfa3a132f9813ac ==
        0xfd09b3501888445ffc8c3bb95d106440ceee469415fce1474743273094306e2e

    /**
     * This is from the bitwise tests.
     * ```repl
     * :prove t235
     * ```
     */
    property t235 = SHA3_256::hash input == output where
        input = KBO::truncate`{235} (join [
            0xd03d466ab65db8e5131a414637174b,
            0x646d0612977d194dcb75b910d2a903
        ])
        output = join [
            0x06413eb50e238e09843aa51b0b5fb7ca,
            0x52b87db7d71f384b5b93f57843c89f37
        ]

/**
 * CAVP test vectors for SHA3-384. These are selected from the
 * `SHA3_384ShortMsg.rsp` file.
 */
submodule SHA3_384 where
    import Primitive::Keyless::Hash::SHA3::SHA3_384 as SHA3_384

    /**
     * This is from the bitwise tests.
     * ```repl
     * :prove t1
     * ```
     */
    property t1 = SHA3_384::hash [] == output where
        output = join [
            0x0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61,
            0x995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004
        ]

    /**
     * This is from the bitwise tests.
     * ```repl
     * :prove t64
     * ```
     */
    property t64 = SHA3_384::hash 0x72189b5f18121fb7 == output where
        output = join [
            0xb5be454e64fb00d8ebf23cece42fdcf20e88bb5067ab17c2,
            0x19068b1533eb485341a84a933f837d9abd65b62604936469
        ]

    /**
     * This is from the bytewise tests.
     * ```repl
     * :prove t72
     * ```
     */
    property t72 = SHA3_384::hash 0xa36e5a59043b6333d7 == output where
        output = join [
            0xbd045661663436d07720ff3c8b6f922066dfe244456a56ca,
            0x46dfb3f7e271116d932107c7b04cc7c60173e08d0c2e107c
        ]

/**
 * CAVP test vectors for SHA3-512. These are selected from the
 * `SHA3_512ShortMsg.rsp` file.
 */
submodule SHA3_512 where
    import Primitive::Keyless::Hash::SHA3::SHA3_512 as SHA3_512

    /**
     * This is from the bitwise tests.
     * ```repl
     * :prove t1
     * ```
     */
    property t1 = SHA3_512::hash [] == output where
        output = join [
            0xa69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a6,
            0x15b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26
        ]

    /**
     * This is from the bytewise tests.
     * ```repl
     * :prove t72
     * ```
     */
    property t72 = SHA3_512::hash 0x3d6093966950abd846 == output where
        output = join [
            0x53e30da8b74ae76abf1f65761653ebfbe87882e9ea0ea564addd7cfd5a652457,
            0x8ad6be014d7799799ef5e15c679582b791159add823b95c91e26de62dcb74cfa
        ]

    /**
     * This is from the bitwise tests.
     * ```repl
     * :prove t100
     * ```
     */
    property t100 = SHA3_512::hash input == output where
        input = KBO::truncate`{100} 0xd404d8e31f8091709122025a0c
        output = join [
            0xa5ce9e2523788040eab94f0a2467efc2a1e6d4ea74e9248f97f94ce1407f0c88,
            0x2e6b0578d98a7067d98c79b2b1dd2cb76393e6356061146637e5240d34ed6955
        ]

